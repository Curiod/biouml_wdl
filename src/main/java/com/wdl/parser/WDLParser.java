/* WDLParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. WDLParser.java */
package com.wdl.parser;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;


public class WDLParser/*@bgen(jjtree)*/implements WDLParserTreeConstants, WDLParserConstants {/*@bgen(jjtree)*/
  protected JJTWDLParserState jjtree = new JJTWDLParserState();protected Logger log = Logger.getLogger(WDLParser.class.getName());
        private String version;
        private boolean workflowExist = false;
    /** Default constructor. */
    public WDLParser()
    {
        this (new StringReader("0"));
    }

    public AstStart parse(Reader reader) throws ParseException
    {
        ReInit(reader);
        AstStart astStart = Start();
        return astStart;
    }

    public String getVersion()
    {
        return version;
    }

/***************************************************************
                   GRAMMAR START
***************************************************************/
  final public AstStart Start() throws ParseException {/*@bgen(jjtree) Start */
  AstStart jjtn000 = new AstStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      version();
      label_1:
      while (true) {
        astElement();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TASK:
        case WORKFLOW:
        case IMPORT:
        case STRUCT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void astElement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TASK:{
      task();
      break;
      }
    case WORKFLOW:{
      workflow();
      break;
      }
    case STRUCT:{
      struct();
      break;
      }
    case IMPORT:{
      importWDL();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// version of WDL
  final public void version() throws ParseException {/*@bgen(jjtree) Version */
  AstVersion jjtn000 = new AstVersion(JJTVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(VERSION);
      jj_consume_token(FLOATING_POINT_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                             jjtn000.jjtSetLastToken(getToken(0));
this.version = token.image;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void task() throws ParseException {/*@bgen(jjtree) Task */
  AstTask jjtn000 = new AstTask(JJTTASK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TASK);
      symbol();
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INPUT:
        case OUTPUT:
        case PRIMITIVE_TYPE:
        case ARRAY:
        case OBJECT_TYPE:
        case PAIR:
        case MAP:
        case META:
        case PARAMETER_META:
        case RUNTIME:
        case COMMAND:
        case HINTS:
        case REQUIREMENTS:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INPUT:{
          input();
          break;
          }
        case PRIMITIVE_TYPE:
        case ARRAY:
        case OBJECT_TYPE:
        case PAIR:
        case MAP:
        case SYMBOL:{
          declaration(true);
          break;
          }
        case OUTPUT:{
          output();
          break;
          }
        case COMMAND:{
          command();
          break;
          }
        case RUNTIME:{
          runtime();
          break;
          }
        case REQUIREMENTS:{
          requirements();
          break;
          }
        case HINTS:{
          hints();
          break;
          }
        case META:{
          meta();
          break;
          }
        case PARAMETER_META:{
          parameter_meta();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void meta() throws ParseException {/*@bgen(jjtree) Meta */
  AstMeta jjtn000 = new AstMeta(JJTMETA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(META);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        symbol();
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COLON);
        } finally {
if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE_OR_FALSE:
        case NULL:
        case TEXT_STRING:
        case FLOATING_POINT_LITERAL:{
          metadataFormulaElement();
          break;
          }
        case SQUARE_BRACKET_L:{
          metaArray();
          break;
          }
        case BRACE_L:{
          metaMap();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void parameter_meta() throws ParseException {/*@bgen(jjtree) Meta */
  AstMeta jjtn000 = new AstMeta(JJTMETA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(PARAMETER_META);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        symbol();
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COLON);
        } finally {
if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE_OR_FALSE:
        case NULL:
        case TEXT_STRING:
        case FLOATING_POINT_LITERAL:{
          metadataFormulaElement();
          break;
          }
        case SQUARE_BRACKET_L:{
          metaArray();
          break;
          }
        case BRACE_L:{
          metaMap();
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void metadataFormulaElement() throws ParseException {/*@bgen(jjtree) MetaFormulaElement */
  AstMetaFormulaElement jjtn000 = new AstMetaFormulaElement(JJTMETAFORMULAELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE_OR_FALSE:{
        jj_consume_token(TRUE_OR_FALSE);
        break;
        }
      case TEXT_STRING:{
        jj_consume_token(TEXT_STRING);
        break;
        }
      case FLOATING_POINT_LITERAL:{
        jj_consume_token(FLOATING_POINT_LITERAL);
        break;
        }
      case NULL:{
        jj_consume_token(NULL);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void metaArray() throws ParseException {/*@bgen(jjtree) Array */
  AstArray jjtn000 = new AstArray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_L);
jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                                 jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE_OR_FALSE:
      case NULL:
      case TEXT_STRING:
      case FLOATING_POINT_LITERAL:{
        metadataFormulaElement();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            break label_5;
          }
AstComma jjtn002 = new AstComma(JJTCOMMA);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtn002.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(COMMA);
          } finally {
if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtn002.jjtSetLastToken(getToken(0));
               }
          }
          metadataFormulaElement();
        }
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_R);
jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
                                 jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void metaMap() throws ParseException {/*@bgen(jjtree) Map */
  AstMap jjtn000 = new AstMap(JJTMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      metaKeyValue();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
AstComma jjtn002 = new AstComma(JJTCOMMA);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMA);
        } finally {
if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
        }
        metaKeyValue();
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void metaKeyValue() throws ParseException {/*@bgen(jjtree) KeyValue */
  AstKeyValue jjtn000 = new AstKeyValue(JJTKEYVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SYMBOL);
jjtn000.setKey(token.image);
AstColon jjtn001 = new AstColon(JJTCOLON);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COLON);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      metadataFormulaElement();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void workflow() throws ParseException {/*@bgen(jjtree) Workflow */
        AstWorkflow jjtn000 = new AstWorkflow(JJTWORKFLOW);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));if (workflowExist)
                throw new ParseException("The file can contain only one workflow declaration");
    try {
      jj_consume_token(WORKFLOW);
      symbol();
jjtn000.setName(token.image);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INPUT:
        case OUTPUT:
        case PRIMITIVE_TYPE:
        case ARRAY:
        case OBJECT_TYPE:
        case PAIR:
        case MAP:
        case CALL:
        case IF:
        case META:
        case PARAMETER_META:
        case SCATTER:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INPUT:{
          input();
          break;
          }
        case PRIMITIVE_TYPE:
        case ARRAY:
        case OBJECT_TYPE:
        case PAIR:
        case MAP:
        case SYMBOL:{
          declaration(true);
          break;
          }
        case OUTPUT:{
          output();
          break;
          }
        case CALL:{
          call();
          break;
          }
        case SCATTER:{
          scatter();
          break;
          }
        case META:{
          meta();
          break;
          }
        case PARAMETER_META:{
          parameter_meta();
          break;
          }
        case IF:{
          conditional();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
this.workflowExist = true;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void scatter() throws ParseException {/*@bgen(jjtree) Scatter */
  AstScatter jjtn000 = new AstScatter(JJTSCATTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SCATTER);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_L);
jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      symbol();
AstIn jjtn002 = new AstIn(JJTIN);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(IN);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      expression();
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_R);
jjtree.closeNodeScope(jjtn003, true);
                     jjtc003 = false;
                     jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn004, true);
                    jjtc004 = false;
                    jjtn004.jjtSetLastToken(getToken(0));
jjtn004.setElement(token.image);
      } finally {
if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIMITIVE_TYPE:
        case ARRAY:
        case OBJECT_TYPE:
        case PAIR:
        case MAP:
        case CALL:
        case IF:
        case SCATTER:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIMITIVE_TYPE:
        case ARRAY:
        case OBJECT_TYPE:
        case PAIR:
        case MAP:
        case SYMBOL:{
          declaration(true);
          break;
          }
        case CALL:{
          call();
          break;
          }
        case SCATTER:{
          scatter();
          break;
          }
        case IF:{
          conditional();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
AstRegularFormulaElement jjtn005 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn005, true);
                    jjtc005 = false;
                    jjtn005.jjtSetLastToken(getToken(0));
jjtn005.setElement(token.image);
      } finally {
if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void conditional() throws ParseException {/*@bgen(jjtree) Conditional */
  AstConditional jjtn000 = new AstConditional(JJTCONDITIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_L);
jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                         jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      expression();
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_R);
jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
                         jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIMITIVE_TYPE:
        case ARRAY:
        case OBJECT_TYPE:
        case PAIR:
        case MAP:
        case CALL:
        case IF:
        case SCATTER:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIMITIVE_TYPE:
        case ARRAY:
        case OBJECT_TYPE:
        case PAIR:
        case MAP:
        case SYMBOL:{
          declaration(true);
          break;
          }
        case CALL:{
          call();
          break;
          }
        case SCATTER:{
          scatter();
          break;
          }
        case IF:{
          conditional();
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn004, true);
                    jjtc004 = false;
                    jjtn004.jjtSetLastToken(getToken(0));
jjtn004.setElement(token.image);
      } finally {
if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void command() throws ParseException {/*@bgen(jjtree) Command */
  AstCommand jjtn000 = new AstCommand(JJTCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COMMAND);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMAND_HEREDOC_START:{
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMAND_HEREDOC_START);
jjtree.closeNodeScope(jjtn001, true);
                                              jjtc001 = false;
                                              jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
        } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
        }
AstBashString jjtn002 = new AstBashString(JJTBASHSTRING);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
        try {
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case START:
            case COMMAND_END:
            case ANY:{
              ;
              break;
              }
            default:
              jj_la1[18] = jj_gen;
              break label_10;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ANY:{
              jj_consume_token(ANY);
              break;
              }
            case START:{
              jj_consume_token(START);
              break;
              }
            case COMMAND_END:{
              jj_consume_token(COMMAND_END);
              break;
              }
            default:
              jj_la1[19] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } finally {
if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
        }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMAND_HEREDOC_END);
jjtree.closeNodeScope(jjtn003, true);
                                            jjtc003 = false;
                                            jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
        } finally {
if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
        }
        break;
        }
      case COMMAND_START:{
AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
                   jjtn004.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMAND_START);
jjtree.closeNodeScope(jjtn004, true);
                                      jjtc004 = false;
                                      jjtn004.jjtSetLastToken(getToken(0));
jjtn004.setElement(token.image);
        } finally {
if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtn004.jjtSetLastToken(getToken(0));
                   }
        }
AstBashString jjtn005 = new AstBashString(JJTBASHSTRING);
                    boolean jjtc005 = true;
                    jjtree.openNodeScope(jjtn005);
                    jjtn005.jjtSetFirstToken(getToken(1));
        try {
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case START:
            case COMMAND_HEREDOC_END:
            case ANY:{
              ;
              break;
              }
            default:
              jj_la1[20] = jj_gen;
              break label_11;
            }
            bashString();
          }
        } catch (Throwable jjte005) {
if (jjtc005) {
                      jjtree.clearNodeScope(jjtn005);
                      jjtc005 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte005 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte005;}
                    }
                    if (jjte005 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte005;}
                    }
                    {if (true) throw (Error)jjte005;}
        } finally {
if (jjtc005) {
                      jjtree.closeNodeScope(jjtn005, true);
                      jjtn005.jjtSetLastToken(getToken(0));
                    }
        }
AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                   boolean jjtc006 = true;
                   jjtree.openNodeScope(jjtn006);
                   jjtn006.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMAND_END);
jjtree.closeNodeScope(jjtn006, true);
                                    jjtc006 = false;
                                    jjtn006.jjtSetLastToken(getToken(0));
jjtn006.setElement(token.image);
        } finally {
if (jjtc006) {
                     jjtree.closeNodeScope(jjtn006, true);
                     jjtn006.jjtSetLastToken(getToken(0));
                   }
        }
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void bashString() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case START:{
      placeholder();
      break;
      }
    case ANY:{
      jj_consume_token(ANY);
      break;
      }
    case COMMAND_HEREDOC_END:{
      jj_consume_token(COMMAND_HEREDOC_END);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void placeholder() throws ParseException {
    jj_consume_token(START);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case START:
      case COMMAND_HEREDOC_END:
      case ANY:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_12;
      }
      bashString();
    }
    jj_consume_token(COMMAND_END);
}

  final public void call() throws ParseException {/*@bgen(jjtree) Call */
  AstCall jjtn000 = new AstCall(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CALL);
AstSymbol jjtn001 = new AstSymbol(JJTSYMBOL);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SYMBOL);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:{
        as();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRACE_L:{
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
        } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
        }
AstInput jjtn003 = new AstInput(JJTINPUT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(INPUT);
        } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
        }
AstColon jjtn004 = new AstColon(JJTCOLON);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
           jjtn004.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COLON);
        } finally {
if (jjtc004) {
             jjtree.closeNodeScope(jjtn004, true);
             jjtn004.jjtSetLastToken(getToken(0));
           }
        }
        equationSymbol();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            break label_13;
          }
AstComma jjtn005 = new AstComma(JJTCOMMA);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
            jjtn005.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(COMMA);
          } finally {
if (jjtc005) {
              jjtree.closeNodeScope(jjtn005, true);
              jjtn005.jjtSetLastToken(getToken(0));
            }
          }
          equationSymbol();
        }
AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc006 = true;
       jjtree.openNodeScope(jjtn006);
       jjtn006.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn006, true);
                    jjtc006 = false;
                    jjtn006.jjtSetLastToken(getToken(0));
jjtn006.setElement(token.image);
        } finally {
if (jjtc006) {
         jjtree.closeNodeScope(jjtn006, true);
         jjtn006.jjtSetLastToken(getToken(0));
       }
        }
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void equationSymbol() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SYMBOL);
jjtn000.setName(token.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EQUAL);
        } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
        }
        expression();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void runtime() throws ParseException {/*@bgen(jjtree) Runtime */
        AstRuntime jjtn000 = new AstRuntime(JJTRUNTIME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));switch (this.version) {
                case ("1.2"):
                        log.log(Level.WARNING, "The runtime section is deprecated and will be removed in WDL 2.0.");
                        break;
                default:
                        break;
        }
    try {
      jj_consume_token(RUNTIME);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_14;
        }
        symbol();
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COLON);
        } finally {
if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
        }
        expression();
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void requirements() throws ParseException {/*@bgen(jjtree) Runtime */
        AstRuntime jjtn000 = new AstRuntime(JJTRUNTIME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));switch (this.version) {
                case ("1.0"):
                case ("1.1"):
                        throw new ParseException("The requirements section was introduced in WDL 1.2. Use \"runtime\" instead.");
                default:
                        break;
        }
    try {
      jj_consume_token(REQUIREMENTS);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_15;
        }
        symbol();
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COLON);
        } finally {
if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
        }
        expression();
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void hints() throws ParseException {/*@bgen(jjtree) Hints */
        AstHints jjtn000 = new AstHints(JJTHINTS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));switch (this.version) {
                case ("1.0"):
                case ("1.1"):
                        throw new ParseException("The hints section was introduced in WDL 1.2. Specify attributes in \"runtime\" instead.");
                default:
                        break;
        }
    try {
      jj_consume_token(HINTS);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_16;
        }
        symbol();
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COLON);
        } finally {
if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
        }
        expression();
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void input() throws ParseException {/*@bgen(jjtree) Input */
  AstInput jjtn000 = new AstInput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INPUT);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIMITIVE_TYPE:
        case ARRAY:
        case OBJECT_TYPE:
        case PAIR:
        case MAP:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_17;
        }
        declaration(true);
      }
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void output() throws ParseException {/*@bgen(jjtree) Output */
  AstOutput jjtn000 = new AstOutput(JJTOUTPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(OUTPUT);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIMITIVE_TYPE:
        case ARRAY:
        case OBJECT_TYPE:
        case PAIR:
        case MAP:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_18;
        }
        declaration(true);
      }
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void struct() throws ParseException {/*@bgen(jjtree) Struct */
  AstStruct jjtn000 = new AstStruct(JJTSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STRUCT);
      symbol();
jjtn000.setStructName(token.image);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIMITIVE_TYPE:
        case ARRAY:
        case OBJECT_TYPE:
        case PAIR:
        case MAP:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          break label_19;
        }
        declaration(false);
      }
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void declaration(boolean canBeInitialized) throws ParseException {/*@bgen(jjtree) Declaration */
  AstDeclaration jjtn000 = new AstDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      type();
jjtn000.setType(token.image.replace(" ", ""));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUESTION_MARK:{
        jj_consume_token(QUESTION_MARK);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(SYMBOL);
AstSymbol jjtn001 = new AstSymbol(JJTSYMBOL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                  jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setName(token.image);
      } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EQUAL);
jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtn002.jjtSetLastToken(getToken(0));
if (!canBeInitialized)
                {if (true) throw new ParseException("Variable can not be initialized at line " + token.beginLine);}
        jjtn002.setElement(token.image);
        } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
        }
        expression();
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIMITIVE_TYPE:
    case OBJECT_TYPE:
    case SYMBOL:{
AstType jjtn001 = new AstType(JJTTYPE);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIMITIVE_TYPE:{
          jj_consume_token(PRIMITIVE_TYPE);
          break;
          }
        case OBJECT_TYPE:{
          jj_consume_token(OBJECT_TYPE);
          break;
          }
        case SYMBOL:{
          jj_consume_token(SYMBOL);
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      break;
      }
    case ARRAY:{
      arrayType();
      break;
      }
    case MAP:{
      mapType();
      break;
      }
    case PAIR:{
      pairType();
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void arrayType() throws ParseException {/*@bgen(jjtree) ArrayType */
  AstArrayType jjtn000 = new AstArrayType(JJTARRAYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ARRAY);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_L);
jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                             jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      type();
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_R);
jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
                             jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(PLUS);
jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                   jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
        } finally {
if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtn003.jjtSetLastToken(getToken(0));
        }
        }
jjtn000.setNonEmpty(true);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void pairType() throws ParseException {/*@bgen(jjtree) PairType */
  AstPairType jjtn000 = new AstPairType(JJTPAIRTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(PAIR);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_L);
jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                             jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      type();
AstComma jjtn002 = new AstComma(JJTCOMMA);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COMMA);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      type();
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_R);
jjtree.closeNodeScope(jjtn003, true);
                             jjtc003 = false;
                             jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void mapType() throws ParseException {/*@bgen(jjtree) MapType */
  AstMapType jjtn000 = new AstMapType(JJTMAPTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(MAP);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_L);
jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                             jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      type();
AstComma jjtn002 = new AstComma(JJTCOMMA);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COMMA);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      type();
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_R);
jjtree.closeNodeScope(jjtn003, true);
                             jjtc003 = false;
                             jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void ternary() throws ParseException {/*@bgen(jjtree) Ternary */
  AstTernary jjtn000 = new AstTernary(JJTTERNARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      expression();
AstThen jjtn001 = new AstThen(JJTTHEN);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(THEN);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      expression();
AstElse jjtn002 = new AstElse(JJTELSE);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(ELSE);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void expression() throws ParseException {/*@bgen(jjtree) Expression */
  AstExpression jjtn000 = new AstExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_20:
      while (true) {
        if (jj_2_1(2)) {
          constructor();
        } else if (jj_2_2(10)) {
          expressionInBrackets();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TEXT_STRING:{
            text();
            break;
            }
          case SQUARE_BRACKET_L:{
            array();
            break;
            }
          case BRACE_L:{
            map();
            break;
            }
          case BRAKET_L:{
            pair();
            break;
            }
          default:
            jj_la1[39] = jj_gen;
            if (jj_2_3(2)) {
              containerElement();
            } else if (jj_2_4(2)) {
              function();
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case NONE:{
AstNone jjtn001 = new AstNone(JJTNONE);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
         jjtn001.jjtSetFirstToken(getToken(1));
                try {
                  jj_consume_token(NONE);
                } finally {
if (jjtc001) {
           jjtree.closeNodeScope(jjtn001, true);
           jjtn001.jjtSetLastToken(getToken(0));
         }
                }
                break;
                }
              case TRUE_OR_FALSE:
              case AND:
              case OR:
              case NOT:
              case EQUAL:
              case PLUS:
              case MINUS:
              case SUBSYMBOL:
              case SYMBOL:
              case INTEGER:
              case TRIANGULAR_BRACKET_L:
              case TRIANGULAR_BRACKET_R:
              case OPERATOR:
              case STAR:
              case FLOATING_POINT_LITERAL:{
                regularFormulaElement();
                break;
                }
              case IF:{
                ternary();
                break;
                }
              default:
                jj_la1[40] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NONE:
        case TRUE_OR_FALSE:
        case IF:
        case OBJECT:
        case STANDARD_FUNCTION:
        case AND:
        case OR:
        case NOT:
        case BRAKET_L:
        case EQUAL:
        case PLUS:
        case MINUS:
        case SUBSYMBOL:
        case TEXT_STRING:
        case SYMBOL:
        case INTEGER:
        case TRIANGULAR_BRACKET_L:
        case TRIANGULAR_BRACKET_R:
        case BRACE_L:
        case SQUARE_BRACKET_L:
        case OPERATOR:
        case STAR:
        case FLOATING_POINT_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          break label_20;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void expressionInBrackets() throws ParseException {/*@bgen(jjtree) Expression */
  AstExpression jjtn000 = new AstExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BRAKET_L);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
      }
      expression();
      jj_consume_token(BRAKET_R);
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtn002.jjtSetLastToken(getToken(0));
                    }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void containerElement() throws ParseException {/*@bgen(jjtree) ContainerElement */
  AstContainerElement jjtn000 = new AstContainerElement(JJTCONTAINERELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SYMBOL);
jjtn000.setContainerName(token.image);
      jj_consume_token(SQUARE_BRACKET_L);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TEXT_STRING:{
        jj_consume_token(TEXT_STRING);
        break;
        }
      case SYMBOL:{
        jj_consume_token(SYMBOL);
        break;
        }
      case SUBSYMBOL:{
        jj_consume_token(SUBSYMBOL);
        break;
        }
      case INTEGER:{
        jj_consume_token(INTEGER);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtn000.setKey(token.image);
      jj_consume_token(SQUARE_BRACKET_R);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void constructor() throws ParseException {/*@bgen(jjtree) Constructor */
  AstConstructor jjtn000 = new AstConstructor(JJTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OBJECT:{
        jj_consume_token(OBJECT);
        break;
        }
      case SYMBOL:{
        jj_consume_token(SYMBOL);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtn000.setName(token.image);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOL:{
        constructorKeyValue();
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[44] = jj_gen;
            break label_21;
          }
AstComma jjtn002 = new AstComma(JJTCOMMA);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(COMMA);
          } finally {
if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
          }
          constructorKeyValue();
        }
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        ;
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void constructorKeyValue() throws ParseException {/*@bgen(jjtree) KeyValue */
  AstKeyValue jjtn000 = new AstKeyValue(JJTKEYVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SYMBOL);
jjtn000.setKey(token.image);
AstColon jjtn001 = new AstColon(JJTCOLON);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COLON);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void importWDL() throws ParseException {/*@bgen(jjtree) Import */
  AstImport jjtn000 = new AstImport(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IMPORT);
      text();
      as();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALIAS:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_22;
        }
        alias();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void alias() throws ParseException {/*@bgen(jjtree) Alias */
  AstAlias jjtn000 = new AstAlias(JJTALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ALIAS);
      symbol();
      as();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void text() throws ParseException {/*@bgen(jjtree) Text */
  AstText jjtn000 = new AstText(JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TEXT_STRING);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText(token.image.substring(1, token.image.length() - 1));
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void function() throws ParseException {/*@bgen(jjtree) Function */
  AstFunction jjtn000 = new AstFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOL:{
        jj_consume_token(SYMBOL);
        break;
        }
      case STANDARD_FUNCTION:{
        jj_consume_token(STANDARD_FUNCTION);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtn000.setName(token.image);
      jj_consume_token(BRAKET_L);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NONE:
      case TRUE_OR_FALSE:
      case IF:
      case OBJECT:
      case STANDARD_FUNCTION:
      case AND:
      case OR:
      case NOT:
      case BRAKET_L:
      case EQUAL:
      case PLUS:
      case MINUS:
      case SUBSYMBOL:
      case TEXT_STRING:
      case SYMBOL:
      case INTEGER:
      case TRIANGULAR_BRACKET_L:
      case TRIANGULAR_BRACKET_R:
      case BRACE_L:
      case SQUARE_BRACKET_L:
      case OPERATOR:
      case STAR:
      case FLOATING_POINT_LITERAL:{
        expression();
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[48] = jj_gen;
            break label_23;
          }
AstComma jjtn002 = new AstComma(JJTCOMMA);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(COMMA);
          } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                jjtn002.jjtSetLastToken(getToken(0));
              }
          }
          expression();
        }
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      jj_consume_token(BRAKET_R);
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtn003.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                      jjtn003.jjtSetLastToken(getToken(0));
                    }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void regularFormulaElement() throws ParseException {/*@bgen(jjtree) RegularFormulaElement */
  AstRegularFormulaElement jjtn000 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOL:{
        jj_consume_token(SYMBOL);
jjtn000.setVariable(true);
        break;
        }
      case TRUE_OR_FALSE:{
        jj_consume_token(TRUE_OR_FALSE);
        break;
        }
      case SUBSYMBOL:{
        jj_consume_token(SUBSYMBOL);
jjtn000.setVariable(true);
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      case OPERATOR:{
        jj_consume_token(OPERATOR);
        break;
        }
      case TRIANGULAR_BRACKET_L:{
        jj_consume_token(TRIANGULAR_BRACKET_L);
        break;
        }
      case TRIANGULAR_BRACKET_R:{
        jj_consume_token(TRIANGULAR_BRACKET_R);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      case EQUAL:{
        jj_consume_token(EQUAL);
        break;
        }
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      case AND:{
        jj_consume_token(AND);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      case FLOATING_POINT_LITERAL:{
        jj_consume_token(FLOATING_POINT_LITERAL);
jjtn000.setNumber(true);
        break;
        }
      case INTEGER:{
        jj_consume_token(INTEGER);
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setElement(token.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void as() throws ParseException {/*@bgen(jjtree) As */
  AstAs jjtn000 = new AstAs(JJTAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(AS);
      symbol();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void symbol() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SYMBOL);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setName(token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
}

  final public void subSymbol() throws ParseException {/*@bgen(jjtree) SubSymbol */
  AstSubSymbol jjtn000 = new AstSubSymbol(JJTSUBSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SUBSYMBOL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setName(token.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void array() throws ParseException {/*@bgen(jjtree) Array */
  AstArray jjtn000 = new AstArray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_L);
jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                                 jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NONE:
      case TRUE_OR_FALSE:
      case IF:
      case OBJECT:
      case STANDARD_FUNCTION:
      case AND:
      case OR:
      case NOT:
      case BRAKET_L:
      case EQUAL:
      case PLUS:
      case MINUS:
      case SUBSYMBOL:
      case TEXT_STRING:
      case SYMBOL:
      case INTEGER:
      case TRIANGULAR_BRACKET_L:
      case TRIANGULAR_BRACKET_R:
      case BRACE_L:
      case SQUARE_BRACKET_L:
      case OPERATOR:
      case STAR:
      case FLOATING_POINT_LITERAL:{
        expression();
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[51] = jj_gen;
            break label_24;
          }
AstComma jjtn002 = new AstComma(JJTCOMMA);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtn002.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(COMMA);
          } finally {
if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtn002.jjtSetLastToken(getToken(0));
               }
          }
          expression();
        }
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_R);
jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
                                 jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void map() throws ParseException {/*@bgen(jjtree) Map */
  AstMap jjtn000 = new AstMap(JJTMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      keyValue();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          break label_25;
        }
AstComma jjtn002 = new AstComma(JJTCOMMA);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMA);
        } finally {
if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
        }
        keyValue();
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void keyValue() throws ParseException {/*@bgen(jjtree) KeyValue */
  AstKeyValue jjtn000 = new AstKeyValue(JJTKEYVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      primitiveType();
jjtn000.setKey(token.image);
AstColon jjtn001 = new AstColon(JJTCOLON);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COLON);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void primitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYMBOL:{
      jj_consume_token(SYMBOL);
      break;
      }
    case TRUE_OR_FALSE:{
      jj_consume_token(TRUE_OR_FALSE);
      break;
      }
    case FLOATING_POINT_LITERAL:{
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
      }
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case SUBSYMBOL:{
      jj_consume_token(SUBSYMBOL);
      break;
      }
    case TEXT_STRING:{
      jj_consume_token(TEXT_STRING);
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void pair() throws ParseException {/*@bgen(jjtree) Pair */
  AstPair jjtn000 = new AstPair(JJTPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_L);
jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
      expression();
AstComma jjtn002 = new AstComma(JJTCOMMA);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COMMA);
      } finally {
if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
      }
      expression();
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_R);
jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtn003.jjtSetLastToken(getToken(0));
          }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_primitiveType_849_5_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ternary_655_5_44()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_expression_666_5_30()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_expression_666_5_30()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_expression_666_5_30()) return true;
    return false;
  }

  private boolean jj_3R_function_750_5_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    if (jj_scan_token(BRAKET_L)) return true;
    xsp = jj_scanpos;
    if (jj_3R_function_753_9_49()) jj_scanpos = xsp;
    if (jj_scan_token(BRAKET_R)) return true;
    return false;
  }

  private boolean jj_3R_keyValue_841_9_47()
 {
    if (jj_3R_primitiveType_849_5_56()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_expression_666_5_30()) return true;
    return false;
  }

  private boolean jj_3R_text_743_5_39()
 {
    if (jj_scan_token(TEXT_STRING)) return true;
    return false;
  }

  private boolean jj_3R_map_831_9_48()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_keyValue_841_9_47()) return true;
    return false;
  }

  private boolean jj_3R_map_828_9_41()
 {
    if (jj_scan_token(BRACE_L)) return true;
    if (jj_3R_keyValue_841_9_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_map_831_9_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BRACE_R)) return true;
    return false;
  }

  private boolean jj_3R_array_816_13_55()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_666_5_30()) return true;
    return false;
  }

  private boolean jj_3R_array_814_13_46()
 {
    if (jj_3R_expression_666_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_array_816_13_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_array_812_9_40()
 {
    if (jj_scan_token(SQUARE_BRACKET_L)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_array_814_13_46()) jj_scanpos = xsp;
    if (jj_scan_token(SQUARE_BRACKET_R)) return true;
    return false;
  }

  private boolean jj_3R_constructorKeyValue_714_9_53()
 {
    if (jj_scan_token(SYMBOL)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_expression_666_5_30()) return true;
    return false;
  }

  private boolean jj_3R_constructor_704_17_54()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_constructorKeyValue_714_9_53()) return true;
    return false;
  }

  private boolean jj_3R_constructor_702_9_45()
 {
    if (jj_3R_constructorKeyValue_714_9_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_constructor_704_17_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_constructor_699_5_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    if (jj_scan_token(BRACE_L)) return true;
    xsp = jj_scanpos;
    if (jj_3R_constructor_702_9_45()) jj_scanpos = xsp;
    if (jj_scan_token(BRACE_R)) return true;
    return false;
  }

  private boolean jj_3R_containerElement_690_5_28()
 {
    if (jj_scan_token(SYMBOL)) return true;
    if (jj_scan_token(SQUARE_BRACKET_L)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    }
    }
    if (jj_scan_token(SQUARE_BRACKET_R)) return true;
    return false;
  }

  private boolean jj_3R_regularFormulaElement_775_15_52()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_regularFormulaElement_770_15_51()
 {
    if (jj_scan_token(SUBSYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_expressionInBrackets_682_5_27()
 {
    if (jj_scan_token(BRAKET_L)) return true;
    if (jj_3R_expression_666_5_30()) return true;
    if (jj_scan_token(BRAKET_R)) return true;
    return false;
  }

  private boolean jj_3R_regularFormulaElement_768_13_50()
 {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_expression_676_7_38()
 {
    if (jj_3R_ternary_655_5_44()) return true;
    return false;
  }

  private boolean jj_3R_expression_675_7_37()
 {
    if (jj_3R_regularFormulaElement_767_5_43()) return true;
    return false;
  }

  private boolean jj_3R_expression_674_7_36()
 {
    if (jj_scan_token(NONE)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_function_750_5_29()) return true;
    return false;
  }

  private boolean jj_3R_pair_861_9_42()
 {
    if (jj_scan_token(BRAKET_L)) return true;
    if (jj_3R_expression_666_5_30()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_666_5_30()) return true;
    if (jj_scan_token(BRAKET_R)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_containerElement_690_5_28()) return true;
    return false;
  }

  private boolean jj_3R_expression_671_7_35()
 {
    if (jj_3R_pair_861_9_42()) return true;
    return false;
  }

  private boolean jj_3R_expression_670_7_34()
 {
    if (jj_3R_map_828_9_41()) return true;
    return false;
  }

  private boolean jj_3R_regularFormulaElement_767_5_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_regularFormulaElement_768_13_50()) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_regularFormulaElement_770_15_51()) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_3R_regularFormulaElement_775_15_52()) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_expression_669_7_33()
 {
    if (jj_3R_array_812_9_40()) return true;
    return false;
  }

  private boolean jj_3R_expression_668_7_32()
 {
    if (jj_3R_text_743_5_39()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_expressionInBrackets_682_5_27()) return true;
    return false;
  }

  private boolean jj_3R_function_755_13_57()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_666_5_30()) return true;
    return false;
  }

  private boolean jj_3R_expression_666_6_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_expression_668_7_32()) {
    jj_scanpos = xsp;
    if (jj_3R_expression_669_7_33()) {
    jj_scanpos = xsp;
    if (jj_3R_expression_670_7_34()) {
    jj_scanpos = xsp;
    if (jj_3R_expression_671_7_35()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_expression_674_7_36()) {
    jj_scanpos = xsp;
    if (jj_3R_expression_675_7_37()) {
    jj_scanpos = xsp;
    if (jj_3R_expression_676_7_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_constructor_699_5_26()) return true;
    return false;
  }

  private boolean jj_3R_expression_666_5_30()
 {
    Token xsp;
    if (jj_3R_expression_666_6_31()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expression_666_6_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_function_753_9_49()
 {
    if (jj_3R_expression_666_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_function_755_13_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public WDLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[55];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x10000c0,0x10000c0,0x5401de00,0x5401de00,0x0,0x200000,0x0,0x200000,0x200000,0x0,0x200000,0x0,0x9449de00,0x9449de00,0x8049d800,0x8049d800,0x8049d800,0x8049d800,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x1d800,0x1d800,0x1d800,0x0,0x0,0x4800,0x1d800,0x0,0x0,0x602000,0x8602000,0x0,0x8000000,0x0,0x0,0x20000,0x0,0x0,0x8602000,0x200000,0x0,0x8602000,0x0,0x200000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x1,0x1,0x6020000,0x6020000,0x0,0x8000004,0x0,0x8000004,0x8000004,0x4000,0x8000004,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0xb00000,0xb00000,0xd00000,0xc0000,0xd00000,0xd00000,0x0,0x4000,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x400,0x0,0x0,0x800,0x8000080,0x9c70,0x8009cf8,0x8008000,0x0,0x4000,0x0,0x0,0x8,0x4000,0x8009cf8,0x9c70,0x4000,0x8009cf8,0x4000,0x8008000,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x2,0x2,0x2,0x10a0,0x2,0x10a0,0x1000,0x0,0x1000,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0xa0,0x161e,0x16be,0x6,0x2,0x0,0x2,0x0,0x2,0x0,0x16be,0x161e,0x0,0x16be,0x0,0x1006,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public WDLParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WDLParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new WDLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public WDLParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new WDLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new WDLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public WDLParser(WDLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(WDLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[77];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 55; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 77; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 4; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
